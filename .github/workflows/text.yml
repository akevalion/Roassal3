name: CI

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the development branch
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: hpi-swa/setup-smalltalkCI@v1
        id: smalltalkci
        with:
          smalltalk-version: Pharo64-9.0
      - run: smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-version }}
        shell: bash
        timeout-minutes: 15

      #badge creation
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Generate a coverage value
        id: coverage
        run: |
          # Generates a GitHub Workflow output named `lines` with a coverage value
          echo "##[set-output name=lines;]${COVERAGE}"
          # Output values to be used by other steps
          echo "##[set-output name=path;]${BADGE_PATH}"
          echo "##[set-output name=branch;]${BRANCH}"
        env:
          COVERAGE: 53.5%
          BADGE_PATH: .github/badges/test-badge.svg
          BRANCH: badges

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.coverage.outputs.branch }}

      # Create the directory where badges will be saved, if needed
      - name: Create destination directory
        env:
          BADGE_PATH: ${{ steps.coverage.outputs.path }}
          run: mkdir -p "${BADGE_PATH%/*}"

      # Use the output from the `coverage` step
      - name: Generate the badge SVG image
        uses: emibcn/badge-action@v1
        id: badge
        with:
          label: 'Test coverage'
          status: ${{ steps.coverage.outputs.lines }}
          color: 'blue,555,daf'
          path: ${{ steps.coverage.outputs.path }}

      - name: Upload badge as artifact
        uses: actions/upload-artifact@v2
        with:
          name: badge
          path: ${{ steps.coverage.outputs.path }}
          if-no-files-found: error

      - name: Commit badge
        continue-on-error: true
        env:
          BADGE: ${{ steps.coverage.outputs.path }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "${BADGE}"
          git commit -m "Add/Update badge"
      - name: Push badge commit
        uses: ad-m/github-push-action@master
        if: ${{ success() }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.extract_branch.outputs.branch }}
